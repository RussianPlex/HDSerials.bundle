# -*- coding: utf-8 -*-

import urllib

PREFIX = '/video/hdserials'
HDSERIALS_URL = 'http://www.hdserials.tv'

HDSERIALS_META_ROUTE = PREFIX + '/getmeta'

ART = 'art-default.jpg'
ICON = 'icon-default.png'
TITLE = 'Title'


def GetVideoObject(item, episode=0):

    if item['session'] == 'external':
        url = info['url']
        do_normalization = True
    else:
        url = MetaUrl('%s||%s' % (item['path'], episode))
        url.update(item, episode)
        do_normalization = False

    return URLService.MetadataObjectForURL(
        url,
        do_normalization=do_normalization
    )


def GetEpisodeURL(url, season, episode):
    if season:
        return '%s?season=%d&episode=%d' % (url, int(season), int(episode))
    return url


def GetInfoByURL(url, parent=None):
    if not Regex('http://moonwalk\.cc/').match(url):
        return {
            'url': url.replace('vkontakte.ru', 'vk.com'),
            'session': 'external',
        }

    headers = {}
    if parent:
        headers['Referer'] = parent
        if 'Referer' in HTTP.Headers:
            url = '%s&%s' % (
                url,
                urlencode({'referer': HTTP.Headers['Referer']})
            )

    elif 'Referer' in HTTP.Headers:
        headers['Referer'] = HTTP.Headers['Referer']

    try:
        page = HTTP.Request(
            url,
            cacheTime=CACHE_1HOUR,
            headers=headers
        ).content
    except Ex.HTTPError, e:
        Log.Debug(e.hdrs)
        Log.Debug(e.msg)
        return None

    data = Regex(
        ('\$\.post\(\'/sessions\/create_session\', {((?:.|\n)+)}\)\.success')
    ).search(page, Regex.MULTILINE)

    if not data:
        return None

    ret = {
        'url': parent if parent else url,
        'session': JSON.ObjectFromString('{%s}' % data.group(1)),
    }

    if ret['session']['content_type'] == 'serial':
        res = HTML.ElementFromString(page)
        ret['seasons'] = {}
        ret['episodes'] = {}
        for item in res.xpath('//select[@id="season"]/option'):
            value = item.get('value')
            ret['seasons'][value] = unicode(item.text_content())
            if item.get('selected'):
                ret['current_season'] = value

        for item in res.xpath('//select[@id="episode"]/option'):
            value = item.get('value')
            ret['episodes'][value] = unicode(item.text_content())
            if item.get('selected'):
                ret['current_episode'] = value

    return ret


def InitMetaUrl(url):
    Log.Debug('Normalize URL: %s' % url)

    try:
        # has attribute crutch
        if url.item:
            return url
    except:

        # Fetch there
        res = url.split('||')
        res.reverse()

        path = res.pop()
        episode = res.pop() if len(res) else None

        url = MetaUrl(url)

        try:
            res = JSON.ObjectFromString(urllib.urlopen(
                'http://127.0.0.1:32400%s?%s' % (
                    HDSERIALS_META_ROUTE,
                    urllib.urlencode({
                        'path': path,
                        'episode': episode
                    })
                )
            ).read())

            if res:
                return url.update(res, episode)

        except:
            pass

    raise Ex.MediaNotAvailable


class MetaUrl(str):
    item = None
    episode = None

    def update(self, item, episode):
        self.item = item
        self.episode = int(episode)
        return self
