# -*- coding: utf-8 -*-

import common as Common


def NormalizeURL(url):
    return Common.InitMetaUrl(url)


def MediaObjectsForURL(url):
    item = url.item
    ret = []

    for variant in item['variants'].values():
        if url.episode and (
            str(item['current_season']) not in variant['seasons']
            or str(url.episode) not in variant['episodes']
        ):
            continue

        session = None
        url_update = None
        episode = None
        season = None

        if item['url'] == variant['url']:
            session = JSON.StringFromObject(variant['session'])
        else:
            url_update = variant['url']
            if url.episode:
                season = item['current_season']
                episode = url.episode

        ret.append(MediaObject(
            parts=[PartObject(
                key=Callback(
                    Play,
                    url=url_update,
                    season=season,
                    episode=episode,
                    session=session
                ),
            )],
            video_resolution=720,
            container='mpegts',
            video_codec=VideoCodec.H264,
            audio_codec=AudioCodec.AAC,
            optimized_for_streaming=True,
            audio_channels=2
        ))

    return ret


def MetadataObjectForURL(url):

    item = url.item
    episode = url.episode

    kwargs = {
        'source_title': L(Common.TITLE),
    }

    for k in [
        'summary', 'thumb', 'directors',
        'rating', 'duration',
        'originally_available_at',
    ]:
        if k in item and item[k]:
            kwargs[k] = item[k]


    if episode:
        if 'roles' in item:
            kwargs['guest_stars'] = item['roles']

        obj = EpisodeObject(
            rating_key=Common.GetEpisodeURL(
                item['url'],
                item['current_season'],
                episode
            ),
            title=item['episodes'][str(episode)],
            season=int(item['current_season']),
            index=int(episode),
            show=item['title'],
            **kwargs
        )
    else:
        for k in ['year', 'original_title', 'countries']:
            if k in item and item[k]:
                kwargs[k] = item[k]

        obj = MovieObject(
            title=item['title'],
            rating_key=item['url'],
            **kwargs
        )

    return obj


@indirect
def Play(session, url, season, episode):
    Log.Debug('Get playlist from %s' % url)

    if not session:
        url_info = Common.GetInfoByURL(Common.GetEpisodeURL(
            url, season, episode
        ), url)

        if not url_info:
            raise Ex.MediaNotAvailable

        session = url_info['session']
    else:
        session = JSON.ObjectFromString(session)

    res = JSON.ObjectFromURL(
        url='http://moonwalk.cc//sessions/create_session',
        values=session,
        method='POST',
        cacheTime=0
    )

    if not res:
        raise Ex.MediaNotAvailable

    try:
        res = HTTP.Request(res['manifest_m3u8']).content
        Log.Debug('Found streams: %s' % res)
    except:
        raise Ex.MediaNotAvailable

    res = [line for line in res.splitlines() if line].pop()

    Log.Debug('Try to play %s' % res)

    res = Callback(Playlist, res=res)

    return IndirectResponse(VideoClipObject, key=HTTPLiveStreamURL(res))


def Playlist(res):

    # Some players does not support gziped response
    Log.Debug('Modify playlist %s' % res)

    path = res.replace('tracks-2,4', 'tracks-1,4').split('/')
    path.pop()
    path = '/'.join(path)
    try:
        res = HTTP.Request(res).content.splitlines()
    except:
        raise Ex.MediaNotAvailable

    for i in range(0, len(res)):
        if res[i] == '#EXT-X-ENDLIST':
            break
        if res[i][:1] != '#':
            res[i] = path + '/' + res[i]

    return "\n".join(res)

